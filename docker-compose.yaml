services:
  receiver:
    build:
      context: ./receiver
      dockerfile: Dockerfile
    environment:
      QUESTDB_CONFIG: ${QUESTDB_CONFIG}
      TICKER_NAMES: ${TICKER_NAMES}
    depends_on:
      quest-db:
        required: true
        condition: service_healthy

  ticker-server:
    build:
      context: ./webserver
      dockerfile: Dockerfile
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB_TICKER=${POSTGRES_DB_TICKER}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - DJANGO_SECRET=${DJANGO_SECRET}
    ports:
      - 8000:8000
    depends_on:
      postgres-db:
        condition: service_healthy
        required: true
    healthcheck:
      test: ["CMD", "curl", "http://localhost:8000/health"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
  
  aggregrator:
    build:
      context: ./aggregrator
      dockerfile: Dockerfile
    # env_file:
    #   - .env
    environment:
      - QUESTDB_HOST=${QUESTDB_HOST}
      - TICKER_STATS_HOST=${TICKER_STATS_HOST}
    depends_on:
      quest-db:
        condition: service_healthy
        required: true
      ticker-server:
        condition: service_healthy
        required: true

  quest-db:
    # image: questdb/questdb:8.2.1
    build:
      context: ./questdb
      dockerfile: Dockerfile
    ports:
      - 9000:9000
    environment:
      - QDB_HTTP_MIN_ENABLED=true
    healthcheck:
      test: ["CMD", "curl", "http://localhost:9003"]
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 10s

  postgres-db:
    image: postgres:17.2
    # restart: always
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB_TICKER}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "db_prod"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 10s